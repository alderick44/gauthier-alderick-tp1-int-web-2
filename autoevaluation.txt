La première bonification CSS effectué fût d’ajouter un sélecteur avancé sur les cartes de la section « Notre offre ». J’ai ajouté le sélecteur « :nth-child(odd) » pour modifier le visuel des cartes impaires (la couleur de fond), si je devais ajouter des cartes plus tard, il serait simple de garder ce motif. Cette bonification a été un premier défi rencontré, je ne trouvais pas d’utilité concrète mais après avoir consulté https://www.freecodecamp.org/news/advanced-css-selectors
j’ai été inspiré par l’exemple de la FAQ avec une alternance de couleur de fond pour améliorer la lisibilité. J’ai donc également utilisé cet exemple pour la bonification suivante.
La prochaine bonification fût d’utiliser le sélecteur d’attribut [data-type^= “reverse-border“] pour appliquer un contour différent à la carte de mon choix, sans créer de nouvelle classe. Cela peut servir, par exemple, pour un produit en vedette. J’ai rencontré un problème de compréhension, je pensais que je pouvais créer un attribut utilisable comme une classe, mais en réalité, il faut bel bien ajouter un attribut HTML « data-type » et lui donner la valeur définie dans le CSS.
J’ai également utilisé un sélecteur [data-type^= “colonne-2/3“] pour faire une grille format 2/3 avec une seule classe.
J’ai également ajouté des animations sur mes cartes de la section « Notre offre », les cartes grandissent lentement lors d’un survol. 
Une animation est aussi ajoutée sur le texte de la bannière, le texte bondit quelques fois au chargement de la page. J’ai rencontré des problèmes de positionnement lors de la création de cette animation car j’avais positionné le texte avec « transform : translate(…); » alors lorsque j’ai appliqué une animation utilisant le même attribut CSS. Mon texte ne se comportait pas du tout comme prévu alors j’ai dû repositionner mon texte plus simplement sans utiliser de « transform : translate(…); ».

Le travail m’a donc permis d’apprendre des usages concrets des sélecteurs avancés, comme la création d’une grille format 2/3 avec une seule classe, ce qui m’a poussé à organiser mon CSS de manière plus propre.
J’ai mieux compris les imbrications, (la différence entre &.classe et &  .classe).
